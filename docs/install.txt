*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*=
*=  Installing, Building, and Using wxAutoExcel
*=
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*                   

*********************
Table of Contents:
*********************
 1 Installation
 2 Building wxAutoExcel
   2.1 General notes
   2.2 Building with Microsoft Visual C++ 2008
   2.3 Building with Microsoft Visual C++ 2013 and 2015
   2.4 Building with CMake   
   2.5 Building with Code::Blocks and TDM-GCC 64
   2.6 Building with other compilers/IDEs
   2.7 Verifying the build
 3 Building applications using wxAutoExcel


1 Installation
========================
The first step, is to download the source archive or clone the code
from GitHUub and put it in any directory. If at all possible, please 
avoid a directory name with spaces in its name, as this can cause problems. 
In the following text this directory will be referred to as WXAUTOEXCELDIR. 


2 Building wxAutoExcel
========================

2.1 General notes
----------------------------------------------------------------
wxAutoExcel comes with Microsoft Visual C++ 2008, 2013, and 2015; and also 
Code::Blocks (set-up for TDM-GCC-64) projects for both the library and the samples. 
When using any of those project files it is assumed you have set the WXWIN environment 
variable to the full path of wxWidgets, i.e. it contains a value such as c:\wxWidgets.

Before building wxAutoExcel, you can change some of its compile-time
settings in WXAUTOEXCELDIR\include\wx\wxAutoExcel_setup.h. These settings
are mostly useful if you don't plan to use some of wxAutoExcel features
such as Shapes or Charts and wish to minimize the size of the wxAutoExcel
(dynamic) library.


2.2 Building with Microsoft Visual C++ 2008
----------------------------------------------------------------
Using the IDE with the provided project files:
There are four configurations available: Debug and Release in static
and DLL versions. Additionally, there is also a static configuration with the 
CRT linked statically. MSVC 2008 project files provide support for building for 
32-bit Windows only. There are several predefined variables affecting the paths 
where wxWidgets libraries will be looked for and under what names; and
to which directories will be the wxAutoExcel build files placed. 
You can change values of these variables using Property Sheets feature of
Microsoft Visual C++ in file wxAutoExcel_vc9.vsprops. Dynamics builds rely on
including $(WXWIN)\include\msvc to autolink the necessary wxWidgets libraries.
To build wxAutoExcel library open wxAutoExcel_vc9.sln file, select the 
desired configuration(s) and build them.                                                                      


2.3 Building with Microsoft Visual C++ 2013 and 2015
----------------------------------------------------------------
Using the IDE with the provided project files:
There are eight configurations available in projects for MS Visual C++ 2013
(wxAutoExcel_vc12.sln) and 2015 (wxAutoExcel_vc14.sln): Debug and Release
in static and DLL versions for both Win32 and x64 platforms.
Additionally, there is also a static Win32 configuration with the CRT linked 
statically and set for Windows XP in the MS Visual C++ 2015 project.
wxAutoExcel uses Property Sheets feature of MS Visual C++ to customize
paths and file names. Most of the settings are taken from
WXWIN\build\msw\wx_setup.props (overriden by settings in WXWIN\build\msw\wx_local.props
if this file exists, see WXWIN\docs\msw\install.txt).
If you wish to customize some settings, e.g. compiler prefix used for wxAutoExcel 
build paths, the recommended way is to copy 
WXAUTOEXCEL\build\wxAutoExcel_vc{12|14}.props file 
to WXAUTOEXCEL\build\wxAutoExcel_vc{12|14}_local.props and change the value of the macro there. 


2.4 Building with CMake
----------------------------------------------------------------
CMake 3.1 or newer is required. As usual, an out-of-source build is strongly
recommended. wxAutoExcel can be built in Debug and/or Release configurations.
Common build options:  
  wxAutoExcel_BUILD_SHARED: whether to build static (lib) or shared (dll) wxAutoExcel library.  
  wxAutoExcel_BUILD_LINK_WX_SHARED: whether to link to wxWidgets dynamically. When linking 
    dynamically, the wxWidgets_LIB_DIR CMake variable should be set to wxWidgets dll
    folder and not the lib folder.       
  wxAutoExcel_BUILD_COMPILER_PREFIX: defaults to "vc" for MSVC and "gc" for GCC
  wxAutoExcel_BUILD_ARCH_SUFFIX: to be added to the name of the library folder.
    Defaults to nothing for 32-bit builds and "_x64" for 64-bit builds
  wxAutoExcel_BUILD_VENDOR: to be appended to the name of the library file.
  wxAutoExcel_BUILD_BUILD_SAMPLES: whether to build the included samples.
  wxAutoExcel_BUILD_USE_PRECOMPILE: whether to use precompiled headers (via cotire).
MSVC specific build option:
  wxAutoExcel_BUILD_USE_STATIC_RUNTIME: whether to link to the static CRT.
     This setting must match the setting used when building wxWidgets
     (RUNTIME_LIBS etc.) and cannot be used when building wxAutoExcel in the shared mode
     or linking to wxWidgets dynamically.
GCC specific build options:
  wxAutoExcel_BUILD_CXX_STANDARD: C++ standard - one of "98", "11", 14", "17", or "1z".
  wxAutoExcel_BUILD_GCC_STD_OPTION: either "gnu++" or "c++"; defaults to gnu++. 
The above option are combined and passed to CXX_FLAG in the -std parameter, 
e.g., "-std=gnu++11". Should match the setting wxWidgets were built with. 
   

2.5 Building with Code::Blocks
----------------------------------------------------------------
Provided C::B project files were tested with Code::Blocks version 16.01 
and TDM-GCC-64 (gcc version 5.1.0 (tdm64-1)). While they can probably 
be used with regular MinGW-32, one of the advantages of TDM-GCC-64 is that 
it can be easily used to build for both 32-bit and 64-bit platforms, 
even when installed on a 32-bit OS.
wxAutoExcel library project file is WXAUTOEXCELDIR/build/wxAutoExcel_gcc.cbp.

Customizing the build:
There are several predefined variables affecting the paths where
wxWidgets libraries will be looked for and under what names; and
to which directories will be the wxAutoExcel build files placed. 
You can change values of these variables using Project Build Options dialog 
(Custom Variables tab for the project root (wxAutoExcel)
Default values for user customizable variables affecting how wxAutoExcel 
will be built:
wxAutoExcelCompilerPrefix = "gcc"
wxAutoExcelArchSuffixX86 = ""
wxAutoExcelArchSuffixX64 = "_x64"
For example, with the default settings wxAutoExcel static 64-bit
libraries will be built in WXAUTOEXCELDIR/lib/gcc_x64_lib 
while dynamic 32-bit libraries will be in WXAUTOEXCELDIR/lib/gcc_dll.

Values related to how wxWiddgets were built:				
wxShortVersionStr = "31"	(linking with wxWidgets 3.1)			
wxCompilerPrefix = "gcc"
wxArchSuffixX86 = ""
wxArchSuffixX64 = "_x64"
wxCfg = ""
For example, with the default settings wxWidgets static release 
64-bit Base library built with GCC is expected to reside in WXWIN/lib/gcc_x64_lib 
directory and be named libwxbase31u.


2.6 Building with other compilers/IDEs
----------------------------------------------------------------
Create a new project just like you would for any other custom library
using wxWidgets. Add the desired build targets (Debug/Release, DLL Debug/DLL 
Release for Win32 and/or x64 ...). For each target you need to define (also) 
the following preprocessor definitions, such as these for Win32 builds:

Static debug:
WIN32 _DEBUG _LIB _WINDOWS __WXMSW__ __WXDEBUG__ _UNICODE UNICODE 

Static release:
WIN32 NDEBUG _LIB __WXMSW__ _UNICODE UNICODE 

DLL debug:
WIN32 _DEBUG _LIB _WINDOWS __WXMSW__ __WXDEBUG__ _USRDLL DLL_EXPORTS 
WXUSINGDLL WXMAKINGDLL_WXAUTOEXCEL _WINDLL _UNICODE UNICODE 

DLL release:
WIN32 NDEBUG _LIB __WXMSW__ _USRDLL DLL_EXPORTS WXUSINGDLL 
WXMAKINGDLL_WXAUTOEXCEL _UNICODE UNICODE 

Depending on the compiler/IDE you may need to add some other compiler specific
defines.

The dynamic builds of wxAutoExcel need to link with wxWidgets's wxbase 
(e.g. wxbase31u) and MSW core (e.g. wxmsw31u_core) libraries. 
Additionaly, you should add these standard Windows libraries to link with:
kernel32 user32 gdi32 comdlg32 winspool shell32 
ole32 oleaut32 uuid advapi32 comctl32 rpcrt4 wsock32 
wininet winmm shlwapi version   

2.7 Verifying the build
----------------------------------------------------------------
After successfully building wxAutoExcel library, go to the WXAUTOEXCELDIR/samples/minimal 
directory and build and run Minimal sample to verify your build works properly.


3 Building applications using wxAutoExcel
=====================================

The project files shipped with wxAutoExcel / generated by CMake show which flags 
should be used when building applications using wxAutoExcel.

Independently of the compiler and IDE you are using you must do the
following to use wxAutoExcel. In addition to the standard wxWidgets-related
and other settings, you need to: 
* Add WXAUTOEXCELDIR/include to the compiler include path.
* Add WXAUTOEXCELDIR/lib/prefix_lib-or-dll to the libraries path. The prefix 
  depends on the compiler (default compiler prefixes are "vc" for MSVC 
  and "gcc" for (TDM-)GCC) and whether X86 or X64 build is used 
  (by default "_X64" is appended to the compiler prefix in 64-bit builds).
  E.g. the default name of the directory with MSVC built 32-bit library 
  is "vc_lib" for the static and "vc_dll" for the dynamic build.
* If you are using the DLL build of wxAutoExcel, add "WXUSINGDLL_WXAUTOEXCEL"
  to the preprocessor definitions.
* Finally, add the wxAutoExcel library (such as wxAutoExcel10u for release 
  and wxAutoExcel10ud for the debug build) to the list of libraries to link
  with. Do not forget that all wxAutoExcel objects are declared in wxAutoExcel 
  namespace.